services:
  config:
    build:
      context: .
      dockerfile: config-server/Dockerfile
      args:
        MODULE_NAME: config-server
    container_name: config
    volumes:
      - ./config-repo:/config-repo
      # Configuration files are hot reloaded, so changes take effect
      # immediately without rebuilding the image.
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  discovery:
    build:
      context: .
      dockerfile: discovery-server/Dockerfile
      args:
        MODULE_NAME: discovery-server
    container_name: discovery
    depends_on:
      config:
        condition: service_healthy
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  pricing-db:
    image: mysql:8.0.33
    container_name: pricing-db
    env_file: .env
    environment:
      MYSQL_DATABASE: pricingdb
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: root_pwd
      TZ: America/Santiago
      LANG: en_US.utf8
      CHARACTER_SET_SERVER: utf8mb4
      COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - pricing-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_pwd"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  reservation-db:
    image: mysql:8.0.33
    container_name: reservation-db
    env_file: .env
    environment:
      MYSQL_DATABASE: reservationdb
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: root_pwd
      TZ: America/Santiago
      LANG: en_US.utf8
      CHARACTER_SET_SERVER: utf8mb4
      COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - reservation-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_pwd"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  client-db:
    image: mysql:8.0.33
    container_name: client-db
    env_file: .env
    environment:
      MYSQL_DATABASE: clientsdb
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: root_pwd
      TZ: America/Santiago
      LANG: en_US.utf8
      CHARACTER_SET_SERVER: utf8mb4
      COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - client-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_pwd"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  # MySQL de sesiones
  session-db:
    image: mysql:8.0.33
    container_name: session-db
    env_file: .env
    environment:
      MYSQL_DATABASE: sessiondb
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: root_pwd
      TZ: America/Santiago
      LANG: en_US.utf8
      CHARACTER_SET_SERVER: utf8mb4
      COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - session-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_pwd"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  pricing:
    build:
      context: .
      dockerfile: pricing-service/Dockerfile
      args:
        MODULE_NAME: pricing-service
    container_name: pricing
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      pricing-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  reservation:
    build:
      context: .
      dockerfile: reservation-service/Dockerfile
      args:
        MODULE_NAME: reservation-service
    container_name: reservation
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
      pricing:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  client:
    build:
      context: .
      dockerfile: client-service/Dockerfile
      args:
        MODULE_NAME: client-service
    container_name: client
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
      client-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  # microservicio sesiones
  session:
    build:
      context: .
      dockerfile: session-service/Dockerfile
      args: { MODULE_NAME: session-service }
    container_name: session
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config: { condition: service_healthy }
      discovery: { condition: service_healthy }
      session-db: { condition: service_healthy }
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  payment:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
      args:
        MODULE_NAME: payment-service
    container_name: payment
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  report:
    build:
      context: .
      dockerfile: report-service/Dockerfile
      args:
        MODULE_NAME: report-service
    container_name: report
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  gateway:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
      args:
        MODULE_NAME: gateway-service
    container_name: gateway
    env_file: .env
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=1000
      - SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER=1.5
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=20000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=6
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: on-failure
    # Health endpoint listens on the management port defined in
    # config-repo/gateway-service.properties
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  frontend:
    build: ./kartingrm-frontend
    container_name: frontend
    ports:
      - "5173:80"
    depends_on:
      - gateway

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports: ["9091:9090"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

volumes:
  pricing-data:
  reservation-data:
  client-data:
  session-data:
